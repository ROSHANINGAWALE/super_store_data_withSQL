CREATE DATABASE PROJECT
use project
SELECT * FROM ORDERSLISTS
ALTER TABLE ORDERSLISTS
ALTER COLUMN ORDERID NVARCHAR(255) NOT NULL

ALTER TABLE ORDERSLISTS
ADD CONSTRAINT PKY_ORDERID PRIMARY KEY (ORDERID)

ALTER TABLE EachOrderBreakdown
ADD CONSTRAINT fkY_OrderID FOREIGN KEY (OrderID) REFERENCES OrdersLists(OrderID)

ALTER TABLE EachOrderBreakdown
ALTER COLUMN OrderID nvarchar(255) not null

SELECT * 
FROM OrdersList O
INNER JOIN EachOrder E
ON O.OrderID = E.OrderID

ALTER TABLE ORDERSLISTS
ADD CITY NVARCHAR(255),
    STATES NVARCHAR(255),
	COUNTRY NVARCHAR(255)

UPDATE OrdersListS
SET CITY = PARSENAME(REPLACE([CITY STATE COUNTRY],',','.'),3),
    STATES = PARSENAME(REPLACE([CITY STATE COUNTRY],',','.'),2),
	COUNTRY = PARSENAME(REPLACE([CITY STATE COUNTRY],',','.'),1)

ALTER TABLE OrdersListS
DROP COLUMN [CITY STATE COUNTRY]

ALTER TABLE EachOrderBreakdown
ADD CATEGORY NVARCHAR(255)

UPDATE EachOrderBreakdown
SET CATEGORY = CASE WHEN LEFT(PRODUCTNAME,3) = 'OFS' THEN 'OFFICE SUPPLIES'
                    WHEN LEFT(PRODUCTNAME,3) = 'FUR' THEN 'FURNITURE'
					WHEN LEFT(PRODUCTNAME,4) = 'TECH' THEN 'TECHNOLOGY'
					END

update EachOrderBreakdown
SET PRODUCTNAME = SUBSTRING(PRODUCTNAME,2,LEN(PRODUCTNAME)-1) WHERE 


select * from OrdersListS
SELECT * FROM EachOrderBreakdown

WITH CTE AS(
select *, ROW_NUMBER() OVER(PARTITION BY ORDERID,PRODUCTNAME,DISCOUNT,SALES,PROFIT,QUANTITY,SUBCATEGORY,CATEGORY ORDER BY ORDERID) AS RN
    FROM EachOrderBreakdown
	)
	DELETE FROM CTE
	WHERE RN > 1

UPDATE OrdersListS
SET OrderPriority = 'NA'
WHERE OrderPriority = ''

SELECT TOP 10*
FROM EachOrderBreakdown
ORDER BY PROFIT DESC

SELECT CATEGORY,COUNT(*) AS'NO OF ORDERS'
FROM EachOrderBreakdown
GROUP BY CATEGORY

SELECT SUBCATEGORY,COUNT(*) AS'NO OF ORDERS',SUM(PROFIT) AS TOTAL_PROFIT
FROM EachOrderBreakdown
GROUP BY SUBCATEGORY 
ORDER BY TOTAL_PROFIT DESC

SELECT TOP 1 CUSTOMERNAME,SUM(SALES) AS HIGHEST_SALES
FROM OrdersListS O
INNER JOIN EachOrderBreakdown E
ON O.ORDERID = E.OrderID
GROUP BY CUSTOMERNAME
ORDER BY HIGHEST_SALES DESC

SELECT MONTH(ORDERDATE) AS MONTH_OF_ORDER, AVG(SALES) AS AVRAGE_SALES
FROM OrdersListS O
INNER JOIN EachOrderBreakdown E
ON O.ORDERID = E.OrderID
GROUP BY MONTH(ORDERDATE)
ORDER BY AVRAGE_SALES DESC


SELECT AVG(QUANTITY) AS AVRAGE_QUNT
FROM OrdersListS O
JOIN EachOrderBreakdown E
ON O.ORDERID = E.ORDERID
WHERE LEFT(CUSTOMERNAME,1) ='S'

SELECT CUSTOMERNAME, YEAR(ORDERDATE) AS YEAR_VALUE
FROM OrdersListS
WHERE YEAR(ORDERDATE) = 2014

SELECT CUSTOMERNAME, MIN(ORDERDATE) AS FIRSTORDER
FROM OrdersList
GROUP BY CustomerName
HAVING YEAR(MIN(ORDERDATE)) = 2014

SELECT SubCategory, SUM(PROFIT) AS TOTAL_PROFIT,
SUM(PROFIT)/(SELECT SUM(PROFIT) FROM EachOrderBreakdown)*100 AS PROFIT_PERCANTAGE
FROM EachOrderBreakdown
GROUP BY SubCategory
ORDER BY PROFIT_PERCANTAGE DESC

SELECT CUSTOMERNAME, COUNT(DISTINCT O.ORDERID) AS DISTINCTID ,AVG(SALES) AS AVRAGE_SALES
FROM OrdersListS O
JOIN EachOrderBreakdown E
ON O.ORDERID = E.OrderID
GROUP BY CUSTOMERNAME
HAVING COUNT(DISTINCT O.ORDERID) > 12

WITH TOPCAT AS( SELECT CATEGORY, SUBCATEGORY, SUM(SALES) AS TOTAL_SALES,
RANK() OVER(PARTITION BY CATEGORY ORDER BY SUM(SALES) DESC) AS SUB_CATEGORY_RANK
FROM EachOrderBreakdown
GROUP BY CATEGORY, SUBCATEGORY)
SELECT * 
FROM TOPCAT
WHERE SUB_CATEGORY_RANK = 1



SELECT * FROM OrdersListS
SELECT * FROM EachOrderBreakdown



